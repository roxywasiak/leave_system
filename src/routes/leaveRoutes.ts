import express, { Request, Response, Router } from "express";
import { Leave } from "../models/Leave";

// Define the expected body structure for POST request
interface LeaveRequestBody {
    userId: number;
    leaveTypeId: number;
    startDate: string;
    endDate: string;
    reason: string;
    status: string;
}

const router: Router = express.Router();

router.post("/leave-request", async (req: Request<{}, {}, LeaveRequestBody>, res: Response): Promise<void> => {
    const { userId, leaveTypeId, startDate, endDate, reason, status } = req.body;

    if (!userId || !leaveTypeId || !startDate || !endDate) {
        res.status(400).json({ message: "Missing required fields" });
        return; 
    }

    try {
        const leaveRequest = new Leave(
            undefined, // id will be generated by the database
            userId,
            leaveTypeId,
            new Date(startDate),
            new Date(endDate),
            status,
            reason
        );

        const result = await Leave.create(leaveRequest);
        res.status(201).json({ message: "Leave request created successfully", result });
    } catch (error) {
        res.status(500).json({ message: "Failed to create leave request", error });
    }
});

router.get("/leave-requests", async (req: Request, res: Response): Promise<void> => {
    try {
        const leaveRequests = await Leave.getAllLeaveRequests();
        res.status(200).json(leaveRequests);
    } catch (error) {
        res.status(500).json({ message: "Failed to fetch leave requests", error });
    }
});

export default router;





