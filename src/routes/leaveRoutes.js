"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const Leave_1 = require("../models/Leave");
const router = express_1.default.Router();
router.post("/leave-request", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { userId, leaveTypeId, startDate, endDate, reason, status } = req.body;
    if (!userId || !leaveTypeId || !startDate || !endDate) {
        res.status(400).json({ message: "Missing required fields" });
        return;
    }
    try {
        const leaveRequest = new Leave_1.Leave(undefined, // id will be generated by the database
        userId, leaveTypeId, new Date(startDate), new Date(endDate), status, reason);
        const result = yield Leave_1.Leave.create(leaveRequest);
        res.status(201).json({ message: "Leave request created successfully", result });
    }
    catch (error) {
        res.status(500).json({ message: "Failed to create leave request", error });
    }
}));
router.get("/leave-requests", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const leaveRequests = yield Leave_1.Leave.getAllLeaveRequests();
        res.status(200).json(leaveRequests);
    }
    catch (error) {
        res.status(500).json({ message: "Failed to fetch leave requests", error });
    }
}));
exports.default = router;
