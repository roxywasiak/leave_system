import { Request, Response, RequestHandler } from "express";
import "../types/express"; // Ensure the custom type augmentation is imported
import { Leave } from "../models/Leave";
import pool from "../config/db"; 
import { ResultSetHeader, QueryResult } from "mysql2";

interface CreateLeaveRequestBody {
  userId: number;
  leaveTypeId: number;
  startDate: string;
  endDate: string;
  reason: string;
}

interface CancelLeaveParams {
  leaveId: string;
}

// Helper function to check if the logged-in user is a manager of the leave requester
const isManagerOfUser = async (managerId: number, userId: number): Promise<boolean> => {
  const query = 'SELECT * FROM usermanagement WHERE userId = ? AND managerId = ?';
  const [rows]: [QueryResult, any] = await pool.execute(query, [userId, managerId]);
  return (rows as any[]).length > 0;  // Process rows safely
};

// Get all leave requests
export const getAllLeaveRequests = async (req: Request, res: Response) => {
  try {
    const leaves = await Leave.getAllLeaveRequests();
    res.status(200).json(leaves);
  } catch (err) {
    console.error("Error fetching leave requests:", err);
    res.status(500).json({ message: "Failed to fetch leave requests" });
  }
};

// Request leave
export const requestLeave: RequestHandler<{}, {}, CreateLeaveRequestBody> = async (req, res) => {
  const { userId, leaveTypeId, startDate, endDate, reason } = req.body;

  if (!userId || !leaveTypeId || !startDate || !endDate) {
   res.status(400).json({ message: "Missing required fields" });
   return;
  }

  try {
    const newLeave = new Leave(
      0, // id will be generated by the database
      userId,
      leaveTypeId,
      new Date(startDate),
      new Date(endDate),
      "Pending",
      reason
    );
    const createdLeave = await Leave.create(newLeave);

    res.status(201).json({ message: "Leave request submitted", data: createdLeave });
  } catch (err) {
    console.error("Error requesting leave:", err);
    res.status(500).json({ message: "Failed to request leave" });
  }
};

// Cancel leave
export const cancelLeave = async (req: Request & { params: { leaveId: string } }, res: Response) => {
  const { leaveId } = req.params;

  try {
    const result = await Leave.cancelLeave(Number(leaveId));
    res.status(200).json({ message: "Leave request cancelled", result });
  } catch (err) {
    console.error("Error cancelling leave:", err);
    res.status(500).json({ message: "Failed to cancel leave" });
  }
};

// Approve leave
export const approveLeave = async (req: Request & { body: { leaveId: string; userId: number } }, res: Response) => {
  const { leaveId, userId } = req.body;  // UserId should be the id of the employee making the leave request
  const loggedInUserId = req.body.user?.userId; // Assuming the logged-in user's ID is in the request body

  if (!loggedInUserId) {
     res.status(401).json({ message: "Unauthorized. No logged-in user." });
     return;
  }

  // Check if the logged-in user is the manager of the user making the leave request
  const isManager = await isManagerOfUser(loggedInUserId, userId);
  if (!isManager) {
    return res.status(403).json({ message: "Access denied. You are not the manager of this user." });
  }

  try {
    const result: ResultSetHeader = await Leave.updateLeaveStatus(Number(leaveId), "Approved", "Approved by manager");
    if (result.affectedRows === 0) {
      res.status(404).json({ message: `Leave ${leaveId} not found` });
    } else {
      res.status(200).json({ message: `Leave ${leaveId} approved`, result });
    }
  } catch (err) {
    console.error("Error approving leave:", err);
    res.status(500).json({ message: "Failed to approve leave" });
    return;
  }
};

// Reject leave
export const rejectLeave = async (req: Request & { body: { leaveId: string; reason: string } }, res: Response) => {
  const { leaveId, reason } = req.body;

  try {
    const result = await Leave.updateLeaveStatus(Number(leaveId), "Rejected", reason || "No reason provided");
    res.status(200).json({ message: `Leave ${leaveId} rejected`, result });
  } catch (err) {
    console.error("Error rejecting leave:", err);
    res.status(500).json({ message: "Failed to reject leave" });
  }
};

// Get user leave status
export const getUserLeaveStatus = async (req: Request & { params: { userId: string } }, res: Response) => {
  const { userId } = req.params;

  try {
    const result = await Leave.getLeaveRequestsByUserId(Number(userId));
    res.status(200).json({ message: "Leave request status", data: result });
  } catch (err) {
    console.error("Error fetching leave status:", err);
    res.status(500).json({ message: "Failed to fetch leave status" });
  }
};

// Get remaining leave
export const getRemainingLeave = async (req: Request<{ userId: string }>, res: Response) => {
  const { userId } = req.params;

  try {
    const remaining = await Leave.getRemainingLeaveDays(Number(userId));
    res.status(200).json({ message: "Remaining leave days", data: { remaining } });
  } catch (err) {
    console.error("Error getting remaining leave:", err);
    res.status(500).json({ message: "Failed to get remaining leave" });
  }
};
