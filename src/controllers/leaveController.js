"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRemainingLeave = exports.getUserLeaveStatus = exports.rejectLeave = exports.approveLeave = exports.cancelLeave = exports.requestLeave = exports.getAllLeaveRequests = void 0;
require("../types/express"); // Ensure the custom type augmentation is imported
const Leave_1 = require("../models/Leave");
const db_1 = __importDefault(require("../config/db"));
// Helper function to check if the logged-in user is a manager of the leave requester
const isManagerOfUser = (managerId, userId) => __awaiter(void 0, void 0, void 0, function* () {
    const query = 'SELECT * FROM usermanagement WHERE userId = ? AND managerId = ?';
    const [rows] = yield db_1.default.execute(query, [userId, managerId]);
    return rows.length > 0; // Process rows safely
});
// Get all leave requests
const getAllLeaveRequests = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const leaves = yield Leave_1.Leave.getAllLeaveRequests();
        res.status(200).json(leaves);
    }
    catch (err) {
        console.error("Error fetching leave requests:", err);
        res.status(500).json({ message: "Failed to fetch leave requests" });
    }
});
exports.getAllLeaveRequests = getAllLeaveRequests;
// Request leave
const requestLeave = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { userId, leaveTypeId, startDate, endDate, reason } = req.body;
    if (!userId || !leaveTypeId || !startDate || !endDate) {
        res.status(400).json({ message: "Missing required fields" });
        return;
    }
    try {
        const newLeave = new Leave_1.Leave(0, // id will be generated by the database
        userId, leaveTypeId, new Date(startDate), new Date(endDate), "Pending", reason);
        const createdLeave = yield Leave_1.Leave.create(newLeave);
        res.status(201).json({ message: "Leave request submitted", data: createdLeave });
    }
    catch (err) {
        console.error("Error requesting leave:", err);
        res.status(500).json({ message: "Failed to request leave" });
    }
});
exports.requestLeave = requestLeave;
// Cancel leave
const cancelLeave = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { leaveId } = req.params;
    try {
        const result = yield Leave_1.Leave.cancelLeave(Number(leaveId));
        res.status(200).json({ message: "Leave request cancelled", result });
    }
    catch (err) {
        console.error("Error cancelling leave:", err);
        res.status(500).json({ message: "Failed to cancel leave" });
    }
});
exports.cancelLeave = cancelLeave;
// Approve leave
const approveLeave = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { leaveId, userId } = req.body; // UserId should be the id of the employee making the leave request
    const loggedInUserId = req.user; // Assuming req.User is populated by a middleware with the logged-in user's info
    if (!loggedInUserId) {
        res.status(401).json({ message: "Unauthorized. No logged-in user." });
        return;
    }
    if (!loggedInUserId) {
        res.status(401).json({ message: "Unauthorized. No logged-in user." });
        return;
    }
    // Check if the logged-in user is the manager of the user making the leave request
    const isManager = yield isManagerOfUser(loggedInUserId, userId);
    if (!isManager) {
        res.status(403).json({ message: "Access denied. You are not the manager of this user." });
    }
    try {
        const result = yield Leave_1.Leave.updateLeaveStatus(Number(leaveId), "Approved", "Approved by manager");
        if (result.affectedRows === 0) {
            res.status(404).json({ message: `Leave ${leaveId} not found` });
        }
        else {
            res.status(200).json({ message: `Leave ${leaveId} approved`, result });
        }
    }
    catch (err) {
        console.error("Error approving leave:", err);
        res.status(500).json({ message: "Failed to approve leave" });
        return;
    }
});
exports.approveLeave = approveLeave;
// Reject leave
const rejectLeave = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { leaveId, reason } = req.body;
    try {
        const result = yield Leave_1.Leave.updateLeaveStatus(Number(leaveId), "Rejected", reason || "No reason provided");
        res.status(200).json({ message: `Leave ${leaveId} rejected`, result });
    }
    catch (err) {
        console.error("Error rejecting leave:", err);
        res.status(500).json({ message: "Failed to reject leave" });
    }
});
exports.rejectLeave = rejectLeave;
// Get user leave status
const getUserLeaveStatus = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { userId } = req.params;
    try {
        const result = yield Leave_1.Leave.getLeaveRequestsByUserId(Number(userId));
        res.status(200).json({ message: "Leave request status", data: result });
    }
    catch (err) {
        console.error("Error fetching leave status:", err);
        res.status(500).json({ message: "Failed to fetch leave status" });
    }
});
exports.getUserLeaveStatus = getUserLeaveStatus;
// Get remaining leave
const getRemainingLeave = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { userId } = req.params;
    try {
        const remaining = yield Leave_1.Leave.getRemainingLeaveDays(Number(userId));
        res.status(200).json({ message: "Remaining leave days", data: { remaining } });
    }
    catch (err) {
        console.error("Error getting remaining leave:", err);
        res.status(500).json({ message: "Failed to get remaining leave" });
    }
});
exports.getRemainingLeave = getRemainingLeave;
