"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Leave = void 0;
const db_1 = __importDefault(require("../config/db"));
class Leave {
    constructor(id, userId, leaveTypeId, startDate, endDate, status, reason) {
        this.id = id;
        this.userId = userId;
        this.leaveTypeId = leaveTypeId;
        this.startDate = startDate;
        this.endDate = endDate;
        this.status = status;
        this.reason = reason;
    }
    static create(leaveRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = `
            INSERT INTO leave_requests (user_id, leave_type_id, start_date, end_date, reason, status)
            VALUES (?, ?, ?, ?, ?, ?)
        `;
            const params = [
                leaveRequest.userId,
                leaveRequest.leaveTypeId,
                leaveRequest.startDate.toISOString(),
                leaveRequest.endDate.toISOString(),
                leaveRequest.reason,
                leaveRequest.status
            ];
            const [result] = yield db_1.default.execute(query, params);
            const insertedId = result.insertId;
            return new Leave(insertedId, // ID generated by the database
            leaveRequest.userId, leaveRequest.leaveTypeId, leaveRequest.startDate, leaveRequest.endDate, leaveRequest.status, leaveRequest.reason);
        });
    }
    static getAllLeaveRequests() {
        return __awaiter(this, void 0, void 0, function* () {
            const query = `
            SELECT * FROM leave_requests
        `;
            const [rows] = yield db_1.default.execute(query);
            return rows;
        });
    }
    static cancelLeave(leaveId) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = `UPDATE leave_requests SET status = 'Cancelled' WHERE id = ?`;
            const [result] = yield db_1.default.execute(query, [leaveId]);
            return result;
        });
    }
    static updateLeaveStatus(leaveId, status, reason) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = `
            UPDATE leave_requests
            SET status = ?, reason = ?
            WHERE id = ?
        `;
            const [result] = yield db_1.default.execute(query, [status, reason, leaveId]);
            return result;
        });
    }
    static getLeaveRequestsByUserId(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = `SELECT * FROM leave_requests WHERE user_id = ?`;
            const [rows] = yield db_1.default.execute(query, [userId]);
            return rows;
        });
    }
    static getRemainingLeaveDays(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const [[user]] = yield db_1.default.execute(`SELECT annual_leave_balance FROM users WHERE id = ?`, [userId]);
            if (!user)
                throw new Error("User not found");
            const [rows] = yield db_1.default.execute(`SELECT start_date, end_date FROM leave_requests WHERE user_id = ? AND status = 'Approved'`, [userId]);
            let usedDays = 0;
            for (const leave of rows) {
                const start = new Date(leave.start_date);
                const end = new Date(leave.end_date);
                const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;
                usedDays += days;
            }
            return user.annual_leave_balance - usedDays;
        });
    }
}
exports.Leave = Leave;
